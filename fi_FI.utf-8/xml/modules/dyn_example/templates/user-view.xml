<?xml version="1.0" encoding="utf-8"?>
<translations xmlns="http://xaraya.com/2002/ns/translations" locale="fi_FI.utf-8">
<entry><string>APPROACH # 1a : the &amp;lt;xar:data-view ...&amp;gt; tag</string><translation></translation></entry>
<entry><string>This tag will automatically retrieve the list of items from DynamicData,
and present them according to its standard &lt;strong&gt;objects/showview.xd&lt;/strong&gt; template.</string><translation></translation></entry>
<entry><string>APPROACH # 1b : the &amp;lt;xar:data-view ...&amp;gt; tag with parameters</string><translation></translation></entry>
<entry><string>Here's an example that uses the &lt;code&gt;layout=&quot;list&quot;&lt;/code&gt;, and &lt;code&gt;linkfield=&quot;name&quot;&lt;/code&gt;
to tell DynamicData which field should be linked to a display of the item. It also
uses &lt;code&gt;fieldlist=&quot;name,age&quot;&lt;/code&gt; to show only a selected list of fields.</string><translation></translation></entry>
<entry><string>You can then use those variables to build your own layout.
The &lt;code&gt;&amp;lt;xar:data-label ...&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xar:data-output ...&amp;gt;&lt;/code&gt; tags
allow you to show individual labels or value outputs in the template.</string><translation></translation></entry>
<entry><string>See the admin list for an example... We'll skip this one here, since we'll be
retrieving 'properties' and 'values' via the module code instead, with the next approach.</string><translation></translation></entry>
<entry><string>After retrieving the object list via API, you can pass along the whole
object list to the template and use &lt;code&gt;&amp;lt;xar:data-view object=&quot;$mylist&quot; /&amp;gt;&lt;/code&gt; to let DynamicData
handle the view. Or you can use &lt;code&gt;&amp;lt;xar:data-view object=&quot;$mylist&quot; tplmodule=&quot;dyn_example&quot; /&amp;gt;&lt;/code&gt;
if you want to provide your own view template in this module :</string><translation></translation></entry>
<entry><string>or you can pass along the properties and values and work like in APPROACH # 2.</string><translation></translation></entry>
<entry><string>Display</string><translation></translation></entry>
<entry><string>Here you'll have to handle the output format of the values yourself - in the module code and/or template...</string><translation></translation></entry>
</translations>
